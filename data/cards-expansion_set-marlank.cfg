{

//BLOOD CARDS

  "Swarm Rats": {
		name: "Swarm Rats",
		set: "Scum_of_Marlank",
		rarity: 0,
		type: "creature",
		portrait: "swarm-rats.png",
		cost: 0,
		loyalty_cost: 3,
		school: "@eval BLOOD",
		creature: {
			tags: ['Rat'],
            abilities: ['Marauder'],
			attack: 2,
			life: 2,
			move: 1,
			image_num: 80,
		}
	},
    
    "Plague Rats": {
		name: "Plague Rats",
		set: "Scum_of_Marlank",
		rarity: 0,
		type: "creature",
		portrait: "plague-rats.png",
		cost: 1,
		loyalty_cost: 3,
		school: "@eval BLOOD",
		creature: {
			tags: ['Rat'],
            abilities: ['Marauder'],
			attack: 2,
			life: 1,
			move: 2,
			image_num: 80,
            triggered_abilities: [{
				name: "Pestilence",
				rules: "Creatures and buildings damaged by plauge rats become poisoned.",

				on_deal_damage: "def(class creature creature, class game game, class creature target, int damage) ->commands 
                add(target.status_effects, ['Poisoned'])",
			}],
		}
	},
    
    "Rat Nest": {
		name: "Rat Nest",
		set: "Scum_of_Marlank",
		rarity: 0,
		type: "creature",
		cost: 3,
		loyalty_cost: 8,
		portrait: "rat-nest.png",
		school: "@eval BLOOD",
        flavor_text: "Rats are naturally hoarders. But even they need a place to store their treasures.",
		creature: {
			tags: ['Rat', 'Base'],
			life: 6,
			portrait_y_offset: 30,
			sprite_sheet: 'building',
			is_building: true,
			image_num: 0,
            passive_abilities: [{
                name: "Hoarding",
                rules: "+2 hand size",
				static_effect: "def(class game game, class creature creature) ->commands
				if(creature.controller >= 0,
				   game.players[creature.controller].apply_static_effect(
					(def(class player p, map info) ->commands add(p.card_draw, 2)),
					(def(class player p, map info) ->commands add(p.card_draw, -2)),
					{}))",
			}]
        }
	},
    
    "Ratman Duelist": "Sezear Duelist",
    
    "Sezear Duelist": {
		name: "Sezear Duelist",
		set: "Scum_of_Marlank",
		rarity: 1,
		type: "creature",
		portrait: "ratman-duelist.png",
		cost: 3,
		loyalty_cost: 5,
		school: "@eval BLOOD",
		creature: {
			tags: ['Rat'],
            abilities: ['First Strike'],
			attack: 5,
			life: 5,
			move: 1,
			image_num: 80,
		}
	},
    
    "Ratman Sniper": "Sezear Sniper",
    
    "Sezear Sniper": {
		name: "Sezear Sniper",
		set: "Scum_of_Marlank",
		rarity: 1,
		type: "creature",
		portrait: "ratman-sniper.png",
		cost: 4,
		loyalty_cost: 3,
		school: "@eval BLOOD",
		creature: {
			tags: ['Rat'],
            abilities: ['Reload'],
			attack: 4,
			life: 4,
			move: 1,
			range: 1,
			image_num: 71,		
		}
	},
    
    "Rezixtix: Plague Lord": {
		name: "Rezixtix: Plague Lord",
		set: "Scum_of_Marlank",
		rarity: 2,
		type: "creature",
		portrait: "rezixtix.png",
		cost: 5,
		loyalty_cost: 11,
		school: "@eval BLOOD",
		creature: {
			tags: ['Hero', 'Rat'],
			attack: 6,
			life: 5,
			move: 1,
			image_num: 71,
             passive_abilities: [{
				name: "Aura of Disease",
				rules: "While alive, all fiendly rat creatures gain +3 life and all enemies are poisoned.",
				static_effect: "def(class game game, class creature creature) ->commands
				[   
                    if(creature.controller = target.controller,
				    [if('Rat' in target.tags, target.apply_static_effect('life', 3))], 
				    target.add_status_effect_static_duration('Poisoned'))
				  | target <- game.creatures,
				    target.is_building = false
				]"
			}],
		}
	},

	"Dark Knight": {
		name: "Dark Knight",
		type: "creature",
        set: "Scum_of_Marlank",
		portrait: "dark-knight.png",
		cost: 6,
		school: "@eval BLOOD",
		rarity: 0,
		creature: {
			tags: ['Undead', 'Mounted'],
			attack: 6,
			life: 4,
            resistance: 1,
            move: 2,
			image_num: 19,
            triggered_abilities: [{
				name: "Revenant",
				once: true,
				rules: "When Dark Knight dies, it is resurrected.",

				on_die: "def(class creature creature, class game game) ->commands
				game.summon_creature(
				  lib.citadel.create_creature(creature.name, {
					name: creature.name,
					controller: creature.controller,
					loc: creature.loc,
					card_name: creature.card_name,
					summon_id: creature.summon_id,
					triggered_abilities: filter(lib.citadel.create_creature(creature.name).triggered_abilities, value.name != 'Revenant')
				  })
				)",
			}],
		}
	},

    
    "Vermintide": {
		name: "Vermintide",
		type: "invocation",
        set: "Scum_of_Marlank",
		school: "@eval BLOOD",
		portrait: "vermintide.png",
		cost: 3,
		loyalty_cost: 1,
		is_response: false,
		rarity: 0,
		is_channeled: true,
		rules: "For each channeled mana, add a 'Swarm Rats' card to your hand up to a maximum of 4.",
        
        possible_targets: "all_players_as_possible_targets",
        
		on_play: "def(class game game, class message.play_card info) ->commands
		[
			if (info.channel > 0, (add(player.hand, ['Swarm Rats']))),
            if (info.channel > 1, (add(player.hand, ['Swarm Rats']))),
            if (info.channel > 2, (add(player.hand, ['Swarm Rats']))),
            if (info.channel > 3, (add(player.hand, ['Swarm Rats']))),
		] where player = game.players[info.targets[0][1]]
		",
	},
    
    //GOLD CARDS
    
        "Cunning Rogue": {
		name: "Cunning Rogue",
		type: "creature",
        set: "Scum_of_Marlank",
		portrait: "cunning-rogue.png",
		cost: 3,
		loyalty_cost: 3,
        rarity: 0,
		school: "@eval GOLD",
		creature: {
			tags: ['Human'],
			attack: 4,
			life: 5,
			move: 1,
            activated_abilities: [
				{
					name: 'Trick',
					cost: 1,
					loyalty_cost: 0,
					school: "@eval GOLD",

					portrait: "school-gold.png",
					rules: "Exhaust Cunning Rogue to switch places with a creature in front or behind him. This can be used as a responce.",
					is_response: true,
                    exhausts_creature: true,

					sound_resolve: 'creatures/wisp-unsummon.wav',
					possible_targets: "def(class game game, class creature creature, [Loc] targets) ->[Loc]|null
						if(targets != [], null,
						   map(filter(game.creatures, value != creature and value.is_building = false and value.loc[0] = creature.loc[0] and abs(value.loc[1] - creature.loc[1])=1 and value.is_valid_target(game, game.nplayer, me)), value.loc)
						)
					",

					on_play: "
					 def(class game game, class message.play_card info) ->commands [
					 	set(creature.loc, info.targets[0]),
						set(game.creature_at_loc_or_die(info.targets[0]).loc, creature.loc),
					] where creature = info.get_creature(game)"
				}
			]
		}
	},
    
    "Absolan, Third Prince of Marlank": {
		name: "Absolan, Third Prince of Marlank",
		set: "Scum_of_Marlank",
		rarity: 2,
		type: "creature",
        hero: true,
		portrait: "absolan-prince-marlank.png",
		cost: 4,
		loyalty_cost: 2,
        is_response: true,
		school: "@eval [GOLD, SAPIENZA]",
        flavor_text: "Someday I should tell you about my brothers...",
		creature: {
			tags: ['Human', 'Lord', 'Assassin'],
			image_num: 25,
			attack: 4,
			life: 5,
			move: 1,
                
                passive_abilities: [{
				name: "Plots",
				rules: "When any allied creature enters the enemy citadel, it deals 4 damage to the enemy and Absolan gains +2/+2.",
				static_effect: "def(class game game, class creature creature) ->commands
				[   
				    [target.add_triggered_ability_static_duration({
					name: q(Plots),
                    hidden_on_creature: true,
					rules: 'When this creature enters the enemy citadel, it deals an additonal 4 damage and Absolan, Third Prince of Marlank gains +2/+2',
					on_reach_endzone: 'def(class creature creature, class game game) ->commands
						[add(game.players[(creature.controller +1)%2].life, -4),
                        map(game.creatures, if(value.name = q(Absolan, Third Prince of Marlank) and value.controller = creature.controller, [add(value.life, 2), add(value.attack, 2)]))]',
					})]
				  | target <- game.creatures,
				    target.is_building = false and creature.controller = target.controller
				]",
			}],
		}
	},
    
    "Scavenging Opportunist": {
		name: "Scavenging Opportunist",
		set: "Scum_of_Marlank",
		rarity: 0,
		type: "creature",
		portrait: "scavenging-opportunist.png",
		cost: 2,
		school: "@eval GOLD",
		creature: {
			tags: ['Human'],
			attack: 2,
			life: 3,
			move: 1,
			image_num: 50,

			triggered_abilities: [{
				name: "Plunderseek",
				rules: "When Scavenging Opportunist is summoned in a lane where the enemy seal is broken, it gains haste and +1 move.",
				on_summoned: "def(class creature creature, class game game) ->commands

				if(game.trophies[(creature.controller +1)%2][creature.loc[0]] = 0, [
					add(creature.abilities, ['Haste']),
					add(creature.move, 1),
				])",
			}],
		}
	},
    
        
    	"Thieves Guild": {
		name: "Thieves Guild",
		//set: "Scum_of_Marlank",
		rarity: 2,
		cost: 3,
		loyalty_cost: 0,
		portrait: "thieves-guild.png",
		school: "@eval GOLD",
		creature: {
			tags: ["Base"],
			image_num: 12,
			portrait_scale: 0.12,
			portrait_y_offset: 40,
			is_construct: "true",
			triggered_abilities: [{
				name: "Opportunities",
				rules: "When your opponent discards a card, Thieves guild gains a counter.",
				on_card_discarded: "def(class creature creature, class game game, class player player, class card card) ->commands
				if(player.team_index != game.team_index(creature.controller), add(creature.energy, 1))",
			}],

			activated_abilities: [
			{
				name: 'Collect',
				cost: 1,
				school: "@eval GOLD",
				portrait: "school-gold.png",
				rules: "Gain a mana for each counter, then clear the counters.",
                flavor_text: "No refunds.",
				exhausts_creature: false,

				on_play: "def(class game game, class message.play_card info) ->commands [
					map(range(creature.energy), game.players[game.current_player_index].gain_mana_from_card(game, me)),
					add(creature.energy, -creature.energy)
				]
					where creature = info.get_creature(game)
				",
			}],
            
            passive_abilities: [{
				name: "Guild Allies",
				rules: "When any allied creature enters the enemy citadel, look at the opponents hand. Force them to discard a card and then gain a copy of this card.",
				static_effect: "def(class game game, class creature creature) ->commands
				[
				    target.add_triggered_ability_static_duration({
					name: q(Guild Training),
                    hidden_on_creature: true,
					rules: 'When this creature enters the enemy citadel, Look at your opponents hand and force them to discard a card. Then gain a copy of this card.',
					on_reach_endzone: 'def(class creature creature, class game game) ->commands
					 if(game.opponent_obj.hand, game.set_current_choice({
						options: game.opponent_obj.hand,
						on_card_chosen: q(def(class game game, class card_base card, int tag) ->commands
							game.opponent_obj.force_discard(game, [card])
						),
					   })
					 )'
				})
							 
				| target <- game.creatures, target.controller = creature.controller]"
			}]
		}
	},
    
    "Decadent Palace": {
		name: "Decadent Palace",
		type: "creature",
        set: "core",
		cost: 4,
		school: "@eval GOLD",
		portrait: "decadent-palace.png",
		creature: {
			tags: ["Base"],
			is_construct: true,
			image_num: 18,
            passive_abilities: [{
                name: 'Prestige',
                rules: "The cost of Lord creatures is 2 less.",
				static_effect: "def(class game game, class creature creature) ->commands
				if(creature.controller >= 0,
				   game.players[creature.controller].add_static_cost_filter(
				     construct('cost_filter', {
						filter_cost: q(def(class player p, class card_base card, int cost) ->int
						   if(card.creature_object and (('Lord' in card.creature_object.tags)),
                           max(0, cost-2), cost)),
					})))",
			}],
            triggered_abilities: [{
                name: 'Decadent',
                rules: "When you summon a Lord creature, it gains -2/-2.",
				on_another_creature_summoned: "def(class creature creature, class game game, class creature new_creature) ->commands 
                if(new_creature.controller = creature.controller, 
                [add(new_creature.life, -2),
                add(new_creature.attack, -2)])"
			}],
		},
	},
    
    
    //FAITH CARDS
    
    "Spirit Caller": {
		name: "Spirit Caller",
		type: "creature",
		portrait: "spirit-caller.png",
        set: "Scum_of_Marlank",
		rarity: 1,
		cost: 5,
		loyalty_cost: 2,
		school: "@eval FAITH",
		creature: {
			tags: ['Human', 'Shaman'],
			image_num: 1,
			attack: 2,
			life: 7,
            range: 2,
            move: 1,
            triggered_abilities: [{
				name: "Call",
				rules: "When one of your creature dies, gain 1 mana.",

				on_another_creature_died: "def(class creature creature, class game game, class creature victim) ->commands if(creature.controller != -1 and (not victim.is_building) and (not victim.is_construct) and victim.controller = creature.controller, [
				player.gain_mana_with_hint(game, creature.loc)
			] where player = game.players[creature.controller])",}]
		}
	},
    
    "Curse of the Smalls": {
		name: "Curse of the Smalls",
		type: "invocation",
        tags: ['Curse'],
		is_response: true,
		cost: 0,
		loyalty_cost: 3,
		school: "@eval FAITH",
		portrait: "curse-smalls.png",
		set: "Scum_of_Marlank",
		rarity: 1,
		rules: "Give target creature an ability which gives it -1 armor and attack per other creature with 3 or less attack on the field.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
          if(target, add(target.passive_abilities, 
      [{
            name: 'Curse of the Smalls',
            rules: 'For each creature with 3 or less attack on the field, gain -1 attack and -1 armor.',
            static_effect: 'def(class game game, class creature creature) ->commands 
                [creature.apply_static_effect(q(attack), -numSmalls),
                creature.apply_static_effect(q(resistance), -numSmalls)] 
            where numSmalls = count(game.creatures, value != creature and (not value.is_building) and value.attack < 4)'
      }]), null) where target = game.creature_at_loc_or_die(info.targets[0])"
	},
    
        "Curse of the Greats": {
		name: "Curse of the Greats",
		type: "invocation",
        tags: ['Curse'],
		is_response: true,
		cost: 0,
		loyalty_cost: 2,
		school: "@eval FAITH",
		portrait: "curse-greats.png",
		set: "Scum_of_Marlank",
		rarity: 1,
		rules: "Give target creature an ability which gives it -2 armor and attack per other creature with 7 or more attack on the field.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
          if(target, add(target.passive_abilities, 
      [{
            name: 'Curse of the Greats',
            rules: 'For each creature with 7 or more attack on the field, gain -2 attack and -2 armor.',
            static_effect: 'def(class game game, class creature creature) ->commands 
                [creature.apply_static_effect(q(attack), -numGreats *2),
                creature.apply_static_effect(q(resistance), -numGreats *2)] 
            where numGreats = count(game.creatures, value != creature and (not value.is_building) and value.attack > 6)'
      }]), null) where target = game.creature_at_loc_or_die(info.targets[0])"
	},
    
        //DAVEPLSFIX: The intended behavior is spelled out in the rules. The problem is that although the card for the
        //            trigger_ability_cast appears it also disappears before you can do anything with it.
        
    	"Priest of Kore": {
		name: "Priest of Kore",
        portrait: "priest-of-kore.png",
        //set: "Scum_of_Marlank",
		rarity: 0,
		type: "creature",
		cost: 4,
		loyalty_cost: 0,
		school: "@eval FAITH",

		creature: {
			tags: ['Human', 'Priest', 'Shadowbound'],

			triggered_abilities: [{
				name: "Malevolent Will",
				rules: "Whenever an aether invocation is cast, Priest of Kore may cuase target creature to lose 1 life.",
				on_card_played: "def(class creature creature, class game game, class player player, class message.play_card info) ->commands
					if(info.card and FAITH in info.card.school and info.card.creature = null, game.trigger_ability_cast(creature, {
						name: 'Pain',
						cost: 0,
						school: FAITH,
						rules: q(Target creature loses 1 life.),
						possible_targets: q(all_creatures_as_possible_targets),

						on_play: q(def(class game game, class message.play_card info) ->commands
						  add(target.life, -1)
						  asserting size(info.targets) = 1
						  where target = game.creature_at_loc_or_die(info.targets[0]))
					}))
				",
			}],
            
			attack: 2,
			life: 5,
			move: 1,
		}
	},
    
    // GAEA CARDS
    
    "Sezear Shaman": {
		name: "Sezear Shaman",
		rarity: 1,
		type: "creature",
        set: "Scum_of_Marlank",
        portrait: "sezear-shaman.png",
		cost: 3,
		loyalty_cost: 1,
		school: "@eval FOOD",

		creature: {
			tags: ['Rat', 'Shaman'],

			triggered_abilities: [{
				name: "Jida Curse",
				rules: "When Sezear Shaman enters the battlefield, it may poison target creature or building.",
				on_summoned: "def(class creature creature, class game game) ->commands
					game.trigger_ability_cast(creature, {
						name: 'Jida Curse',
						cost: 0,
                        tags: ['Curse'],
						school: SAPIENZA,
						rules: q(Poison target creature or player),
						possible_targets: q(all_creatures_and_buildings_as_possible_targets),

						on_play: q(def(class game game, class message.play_card info) ->commands
						  add(game.creature_at_loc_or_die(info.targets[0]).status_effects, ['Poisoned']))
					})",
			}],
            
			attack: 3,
			life: 2,
			move: 1,
		}
	},
    
    // MIXED CARDS
    
    "Guild Assassin": {
		name: "Guild Assassin",
		set: "Scum_of_Marlank",
		rarity: 1,
		type: "creature",
		portrait: "guild-assassin.png",
		cost: 5,
        loyalty_cost: 1,
		school: "@eval [GOLD, BLOOD]",
		creature: {
			tags: ['Human', 'Assassin'],
			attack: 7,
			life: 5,
			move: 1,
			image_num: 50,

			passive_abilities: [{
				name: "Specialist",
				rules: "When attacking a heroic target, gains +5 attack and first strike.",
				static_effect: "def(class game game, class creature creature) ->commands 
                [if(size(creature.targets_attacking(game))>0 and creature.targets_attacking(game)[0].hero, 
                    [creature.apply_static_effect('attack', 5),
                    creature.add_ability_static_duration('First Strike')])
                | target <- game.creatures,
				  (creature = target)
                ]"
			}],
		}
	},
    
    "Bazaar of the Bizarre": {
		name: "Bazaar of the Bizarre",
		type: "creature",
        set: "Scum_of_Marlank",
		cost: 5,
        loyalty_cost: 2,
        hero: true,
		school: "@eval [GOLD, SAPIENZA]",
		portrait: "bazaar-of-bizarre.png",
		creature: {
			tags: ["Marketplace"],
			is_construct: true,
			image_num: 18,
            passive_abilities: [{
				name: "Goods for the Wiley",
				rules: "Merchants, Shamans, Sorcerors, and wyrds you control gain +1 attack and armor.",
				static_effect: "def(class game game, class creature creature) ->commands
                [   
                    if(creature.controller = target.controller,
				    [target.apply_static_effect('attack', 1), target.apply_static_effect('resistance', 1)])
				  | target <- game.creatures,
				    ('Merchant' in target.tags or
                    'Shaman' in target.tags or
                    'Sorceror' in target.tags or
                    'Wyrd' in target.tags)
				]",
			}],
			activated_abilities: [
			{
				name: 'Unseelie Commerce',
				cost: 2,
				school: "@eval SAPIENZA",
				portrait: "school-gold.png",
				rules: "Both players draw 3 cards.",

				on_play: "def(class game game, class message.play_card info) ->commands [
					map(game.players, value.draw_cards(game, 3)),
				]",
			},
            {
                name: 'Plunder Artifacts',
				cost: 0,
				school: "@eval GOLD",
				portrait: "school-gold.png",
				rules: "Sacrifice this land, you gain 2 mana and target creature gains +4/+4",

				possible_targets: "def(class game game, class creature creature, [Loc] targets) ->[Loc]|null
					if(targets = [], [c.loc | c<- game.creatures, c != creature])
				",
				on_play: "def(class game game, class message.play_card info) ->commands
				[
					add(target_creature.life, 4),
                    add(target_creature.attack, 4),
                    set(creature.sacrificed, true),
                    game.players[creature.controller].gain_mana_with_hint(game, creature.loc),
                    game.players[creature.controller].gain_mana_with_hint(game, creature.loc),
				] where target_creature = game.creature_at_loc_or_die(info.targets[0])
				  where creature = info.get_creature(game)",
            }],
            }
		},
    
    // CAMPAIGN ONLY CARDS
    
    "Marlank Wall": {
		name: "Marlank Wall",
		rarity: 0,
		type: "creature",
		cost: 2,
		loyalty_cost: 0,
		portrait: "wall-of-stone.png",
		school: "@eval GOLD",
		creature: {
			tags: ["Wall"],
			life: 8,
			resistance: 1,
			portrait_y_offset: 30,
			sprite_sheet: 'building',
			is_building: true,
			image_num: 0,
		}
	},
	
}
